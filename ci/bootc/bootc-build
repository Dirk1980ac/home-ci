#!/bin/bash

# SPDX-License-Identifier: GPL-2.0

# Parse command line arguments
while getopts "p:w:t:b:uh" flag; do
	case $flag in
		p) PROJECT=$OPTARG ;;
		b) BUILD_ID=$OPTARG ;;
		w) WORKDIR=$OPTARG ;;
		t) TARGET=$OPTARG ;;
		u) UPLOAD="true" ;;
		h) help ;;
		*)
			echo 'Unknown option.'
			exit 1
			;;
	esac
done

# Database file
DBFILE="$HOME/.ci/database/ci-reports.sqlite3"

# Clean up if SIGINT occurs
cleanup()
{
	trap SIGINT
	rm -f $HOME/.ci/${PROJECT}/.$TARGET-running
}

# Print a hopefully useful help text.
help()
{
	cat << EOF
Usage:
bootc-build -p <project> -w <working-dir> -b <build-id> -t <target> [-u]

Options:
	-p <project>		Project name (mandatory)
	-w <directory>		Working directory (mandatory)
	-b <Build ID>		Build ID for the image (mandatory)
	-t <target>			Stable or nightly target (mandatory)
	-u					Upload to server (optional)
	-h					Show this help
EOF
	exit 1
}

# Trap interrupt signal
trap "cleanup" INT

# Show help if a mandatory option is missing
if [ -z "$PROJECT" ] || [ -z "$BUILD_ID" ] || [ -z "$WORKDIR" ] \
	|| [ -z "$TARGET" ]; then
	help
fi

# Initialize status variables
MANIFEST=0
BUILD=0
PUSH=0
SUCCESS=0

# Check if the triggered build is supportet to avoid dead images
if [ "$TARGET" == "nightly" ] || [ "$TARGET" == "stable" ]; then
	# Check if the desired build is already running
	if [ ! -f $HOME/.ci/${PROJECT}/.$TARGET-running ]; then
		# No buid running, so: ABRAKADABRA!
		if [ ! -d $HOME/.ci/${PROJECT} ]; then
			mkdir -p $HOME/.ci/${PROJECT}
		fi

		# Lock the build to avoid concurrent builds of the same type.
		touch $HOME/.ci/${PROJECT}/.$TARGET-running

		# Remove manifest if it exists
		podman manifest rm dirk1980/${PROJECT}:$TARGET

		# Create the manifest
		podman manifest create -a dirk1980/${PROJECT}:$TARGET
		if [ $? -eq 0 ]; then MANIFEST=1; fi

		podman build --build-arg buildid=${BUILD_ID} \
			--platform linux/amd64,linux/arm64 \
			--pull=newer --manifest dirk1980/${PROJECT}:$TARGET ${WORKDIR}

		if [ $? -eq 0 ]; then BUILD=1; fi

		if [ "$UPLOAD" == "true" ]; then
			# Push image.
			podman manifest push --authfile $HOME/.ci/.podman/auth.json \
				dirk1980/${PROJECT}:$TARGET
			if [ $? -eq 0 ]; then
				PUSH=1
			fi

			# Push stable image as latest on stable build
			if [ "$TARGET" == "stable" ]; then
				podman manifest push \
					--authfile $HOME/.ci/.podman/auth.json \
					dirk1980/${PROJECT}:stable \
					docker.io/dirk1980/${PROJECT}:latest
			fi
		fi

		# Overall success of the build. - Might be useful for statistics.
		if [[ $MANIFEST -eq 1 && $BUILD -eq 1 ]]; then
			SUCCESS=1
		fi

		# Build the query for the build log database
		query="insert into buildlog (buildid,project,Type,manifest,"
		query+="build,push,success) "
		query+="VALUES ('$BUILD_ID','$PROJECT','$TARGET',$MANIFEST,$BUILD,"
		query+="$PUSH,$SUCCESS)"

		# Execute the query on the giveb DBFILE
		sqlite3 "$DBFILE" "$query"

		# Check for error
		if [ $? -ne 0 ]; then touch $HOME/.ci/bootc/database-failure; fi

		# We are done so remove lock file
		rm -f $HOME/.ci/${PROJECT}/.$TARGET-running
	fi
	# There is a Build already running. Dorry guy, no ABRAKADABRA!
fi

# Reset trap for SIGINT.
trap SIGINT
